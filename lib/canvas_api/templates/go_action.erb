<% string_utils_required = @parameters.any?{|p| p["enum"] && !is_x_param?(p["name"]) } -%>
<% errors_required = @parameters.any?{|p| p["enum"] || is_required_field(p) }-%>
<% query_params = go_query_params(@parameters) -%>
<% form_params = go_form_params(@parameters) -%>
<% has_return = !!go_return_type(operation) -%>
package requests

import (
  <% if has_return -%>
  "encoding/json"
  <% end -%>
  <% if query_params || form_params || errors_required -%>
  "fmt"
  <% end -%>
  <% if has_return -%>
  "io/ioutil"
  <% end -%>
  <% if errors_required -%>
  "strings"
  <% end -%>
  <% if time_required?(@parameters) -%>
  "time"
  <% end -%>

  <% if query_params || go_form_params(@parameters) -%>
  "github.com/google/go-querystring/query"
  <% end -%>

  "github.com/atomicjolt/canvasapi"
  <% if go_require_models(@parameters) || has_return -%>
  "github.com/atomicjolt/canvasapi/models"
  <% end -%>
  <% if string_utils_required -%>
  "github.com/atomicjolt/string_utils"
  <% end -%>
)

// <%= go_name(@nickname) %> <%= @notes %>
// https://canvas.instructure.com/doc/api<%=@api_path.gsub(".json", ".html")%>
<% if params = go_path_params(@full_parameters)-%>
//
// Path Parameters:
// <%= params.map { |p| go_parameter_doc(p) }.join("\n// ") %>
<% end -%>
<% if params = go_query_params(@full_parameters) -%>
//
// Query Parameters:
// <%= params.map { |p| go_parameter_doc(p) }.join("\n// ") %>
<% end -%>
<% if params = go_form_params(@full_parameters) -%>
//
// Form Parameters:
// <%= params.map { |p| go_parameter_doc(p) }.join("\n// ") %>
<% end -%>
//
type <%= struct_name(@nickname) %> struct {
  <% if params = go_path_params(@parameters) -%>
  Path struct {
    <%= go_struct_fields(@nickname, params) %>
  } `json:"path"`
  <% end -%>

  <% if query_params -%>
  Query struct {
    <%= go_struct_fields(@nickname, query_params) %>
  } `json:"query"`
  <% end -%>

  <% if form_params -%>
  Form struct {
    <%= go_struct_fields(@nickname, form_params) %>
  } `json:"form"`
  <% end -%>
}

func (t *<%= struct_name(@nickname) %>) GetMethod() string {
  return "<%=@method%>"
}

func (t *<%= struct_name(@nickname) %>) GetURLPath() string {
  return "<%= go_api_url %>"
}

func (t *<%= struct_name(@nickname) %>) GetQuery()(string, error) {
  <% if query_params -%>
    v, err := query.Values(t.Query)
    if err != nil {
      return "", err
    }
    return fmt.Sprintf("?%v", v.Encode()), nil
  <% else -%>
    return "", nil
  <% end -%>
}

func (t *<%= struct_name(@nickname) %>) GetBody() (string, error) {
  <% if form_params -%>
	v, err := query.Values(t.Form)
  if err != nil {
    return "", err
  }
	return fmt.Sprintf("%v", v.Encode()), nil
  <% else -%>
  return "", nil
  <% end -%>
}

func (t *<%= struct_name(@nickname) %>) HasErrors() error {
  <% if errors_required -%>
  errs := []string{}
  <% end -%>
  <% @parameters.each do |p| -%>
    <% if is_required_field(p) -%>
      <% if go_type(p["name"], p) == "time.Time" -%>
        if t.<%=go_param_path(p)%>.IsZero() {
          errs = append(errs, "'<%=go_name(p["name"])%>' is required")
        }
      <% else -%>
        if t.<%=go_param_path(p)%> == <%=go_param_empty_value(p)%> {
          errs = append(errs, "'<%=go_name(p["name"])%>' is required")
        }
      <% end -%>
    <% end -%>
    <% if p["enum"] -%>
      <% if p["type"] == "array" -%>
        for _, v := range t.<%=go_param_path(p)%> {
          if !string_utils.Include([]string{"<%= p["enum"].join("\", \"") %>"}, v) {
            errs = append(errs, "<%=go_name(p["name"])%> must be one of <%= p["enum"].join(", ") %>")
          }
        }
      <% elsif !is_x_param?(p["name"]) -%>
        if !string_utils.Include([]string{"<%= p["enum"].join("\", \"") %>"}, t.<%=go_param_path(p)%>) {
          errs = append(errs, "<%=go_name(p["name"])%> must be one of <%= p["enum"].join(", ") %>")
        }
      <% end -%>
    <% end -%>
  <% end -%>
  <% if errors_required -%>
  if len(errs) > 0 {
    return fmt.Errorf(strings.Join(errs, ", "))
  }
  <% end -%>
  return nil
}

func (t *<%= struct_name(@nickname) %>) Do(c *canvasapi.Canvas) <%=go_do_return_value(@operation)%> {
  <% ret_type = go_return_type(@operation, true) -%>
  <% if ret_type -%>
  response, err := c.SendRequest(t)
  <% else -%>
  _, err := c.SendRequest(t)
  <% end -%>
	if err != nil {
		<%= go_do_return_statement(operation) %>
	}

  <% if ret_type -%>
	body, err := ioutil.ReadAll(response.Body)
	response.Body.Close()
	if err != nil {
		<%= go_do_return_statement(operation) %>
	}

	ret := <%=ret_type%>
	err = json.Unmarshal(body, &ret)
	if err != nil {
		<%= go_do_return_statement(operation) %>
	}
  <% end -%>

  <%= go_do_final_return_statement(operation) %>
}

<%= go_render_child_structs %>
