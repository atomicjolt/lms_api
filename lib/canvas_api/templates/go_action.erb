<% string_utils_required = @parameters.any?{|p| p["enum"] && !is_x_param?(p["name"]) } -%>
<% errors_required = @parameters.any?{|p| p["enum"] || is_required_field(p) }-%>
<% query_params = go_query_params(@parameters) -%>
package requests

import (
  <% if errors_required -%>
  "errors"
  <% end -%>
  <% if query_params -%>
  "fmt"
  <% end -%>
  <% if time_required?(@parameters) -%>
  "time"
  <% end -%>

  <% if go_require_models(@parameters) -%>
  "github.com/atomicjolt/go_canvas_api/models"
  <% end -%>
  <% if string_utils_required -%>
  "github.com/atomicjolt/string_utils"
  <% end -%>
)

// <%= go_name(@nickname) %> <%= @notes %>
// https://canvas.instructure.com/doc/api<%=@api_path.gsub(".json", ".html")%>
<% if params = go_path_params(@full_parameters)-%>
//
// Path Parameters:
// <%= params.map { |p| go_parameter_doc(p) }.join("\n// ") %>
<% end -%>
<% if params = go_query_params(@full_parameters) -%>
//
// Query Parameters:
// <%= params.map { |p| go_parameter_doc(p) }.join("\n// ") %>
<% end -%>
<% if params = go_form_params(@full_parameters) -%>
//
// Form Parameters:
// <%= params.map { |p| go_parameter_doc(p) }.join("\n// ") %>
<% end -%>
//
type <%= struct_name(@nickname) %> struct {
  <% if params = go_path_params(@parameters) -%>
  Path struct {
    <%= go_struct_fields(@nickname, params) %>
  } `json:"path"`
  <% end -%>

  <% if params = query_params -%>
  Query struct {
    <%= go_struct_fields(@nickname, params) %>
  } `json:"query"`
  <% end -%>

  <% if params = go_form_params(@parameters) -%>
  Form struct {
    <%= go_struct_fields(@nickname, params) %>
  } `json:"form"`
  <% end -%>
}

func (t *<%= struct_name(@nickname) %>) GetMethod() string {
  return "<%=@method%>"
}

func (t *<%= struct_name(@nickname) %>) GetURLPath() string {
  return "<%= go_api_url %>"
}

func (t *<%= struct_name(@nickname) %>) GetQuery() string {
  <% if query_params -%>
    return fmt.Sprintf("?<%=query_params&.map{|p| "#{p["name"]}=%v"}.join("&")%>", <%= query_params.map{|p| "t.#{go_param_path(p)}"}.join(", ")%>)
  <% else -%>
    return ""
  <% end -%>
}

func (t *<%= struct_name(@nickname) %>) HasErrors() []error {
  errs := []error{}
  <% @parameters.each do |p| -%>
    <% if is_required_field(p) -%>
      <% if go_type(p["name"], p) == "time.Time" -%>
        if t.<%=go_param_path(p)%>.IsZero() {
          errs = append(errs, errors.New("'<%=go_name(p["name"])%>' is required"))
        }
      <% else -%>
        if t.<%=go_param_path(p)%> == <%=go_param_empty_value(p)%> {
          errs = append(errs, errors.New("'<%=go_name(p["name"])%>' is required"))
        }
      <% end -%>
    <% end -%>
    <% if p["enum"] -%>
      <% if p["type"] == "array" -%>
        for _, v := range t.<%=go_param_path(p)%> {
          if !string_utils.Include([]string{"<%= p["enum"].join("\", \"") %>"}, v) {
            errs = append(errs, errors.New("<%=go_name(p["name"])%> must be one of <%= p["enum"].join(", ") %>"))
          }
        }
      <% elsif !is_x_param?(p["name"]) -%>
        if !string_utils.Include([]string{"<%= p["enum"].join("\", \"") %>"}, t.<%=go_param_path(p)%>) {
          errs = append(errs, errors.New("<%=go_name(p["name"])%> must be one of <%= p["enum"].join(", ") %>"))
        }
      <% end -%>
    <% end -%>
  <% end -%>
  return errs
}

<%= go_render_child_structs %>
